//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace WebDemos.net.easychart.data {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Easy Stock Chart Data FeedSoap", Namespace="http://finance.easychart.net")]
    public partial class EasyStockChartDataFeed : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ExchangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndOfDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback BinaryHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback SymbolListOperationCompleted;
        
        private System.Threading.SendOrPostCallback IndustryOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EasyStockChartDataFeed() {
            this.Url = "http://data.easychart.net/datafeed.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ExchangeCompletedEventHandler ExchangeCompleted;
        
        /// <remarks/>
        public event EndOfDayCompletedEventHandler EndOfDayCompleted;
        
        /// <remarks/>
        public event BinaryHistoryCompletedEventHandler BinaryHistoryCompleted;
        
        /// <remarks/>
        public event SymbolListCompletedEventHandler SymbolListCompleted;
        
        /// <remarks/>
        public event IndustryCompletedEventHandler IndustryCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://finance.easychart.net/Exchange", RequestNamespace="http://finance.easychart.net", ResponseNamespace="http://finance.easychart.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Exchange() {
            object[] results = this.Invoke("Exchange", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExchange(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Exchange", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndExchange(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExchangeAsync() {
            this.ExchangeAsync(null);
        }
        
        /// <remarks/>
        public void ExchangeAsync(object userState) {
            if ((this.ExchangeOperationCompleted == null)) {
                this.ExchangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExchangeOperationCompleted);
            }
            this.InvokeAsync("Exchange", new object[0], this.ExchangeOperationCompleted, userState);
        }
        
        private void OnExchangeOperationCompleted(object arg) {
            if ((this.ExchangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExchangeCompleted(this, new ExchangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://finance.easychart.net/EndOfDay", RequestNamespace="http://finance.easychart.net", ResponseNamespace="http://finance.easychart.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EndOfDay(string Exchanges, System.DateTime Date) {
            object[] results = this.Invoke("EndOfDay", new object[] {
                        Exchanges,
                        Date});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEndOfDay(string Exchanges, System.DateTime Date, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EndOfDay", new object[] {
                        Exchanges,
                        Date}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEndOfDay(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EndOfDayAsync(string Exchanges, System.DateTime Date) {
            this.EndOfDayAsync(Exchanges, Date, null);
        }
        
        /// <remarks/>
        public void EndOfDayAsync(string Exchanges, System.DateTime Date, object userState) {
            if ((this.EndOfDayOperationCompleted == null)) {
                this.EndOfDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndOfDayOperationCompleted);
            }
            this.InvokeAsync("EndOfDay", new object[] {
                        Exchanges,
                        Date}, this.EndOfDayOperationCompleted, userState);
        }
        
        private void OnEndOfDayOperationCompleted(object arg) {
            if ((this.EndOfDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndOfDayCompleted(this, new EndOfDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://finance.easychart.net/BinaryHistory", RequestNamespace="http://finance.easychart.net", ResponseNamespace="http://finance.easychart.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] BinaryHistory(string Symbol, bool AddWhenNoSymbol) {
            object[] results = this.Invoke("BinaryHistory", new object[] {
                        Symbol,
                        AddWhenNoSymbol});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBinaryHistory(string Symbol, bool AddWhenNoSymbol, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BinaryHistory", new object[] {
                        Symbol,
                        AddWhenNoSymbol}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndBinaryHistory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void BinaryHistoryAsync(string Symbol, bool AddWhenNoSymbol) {
            this.BinaryHistoryAsync(Symbol, AddWhenNoSymbol, null);
        }
        
        /// <remarks/>
        public void BinaryHistoryAsync(string Symbol, bool AddWhenNoSymbol, object userState) {
            if ((this.BinaryHistoryOperationCompleted == null)) {
                this.BinaryHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBinaryHistoryOperationCompleted);
            }
            this.InvokeAsync("BinaryHistory", new object[] {
                        Symbol,
                        AddWhenNoSymbol}, this.BinaryHistoryOperationCompleted, userState);
        }
        
        private void OnBinaryHistoryOperationCompleted(object arg) {
            if ((this.BinaryHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BinaryHistoryCompleted(this, new BinaryHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://finance.easychart.net/SymbolList", RequestNamespace="http://finance.easychart.net", ResponseNamespace="http://finance.easychart.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SymbolList(string Exchanges) {
            object[] results = this.Invoke("SymbolList", new object[] {
                        Exchanges});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSymbolList(string Exchanges, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SymbolList", new object[] {
                        Exchanges}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSymbolList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SymbolListAsync(string Exchanges) {
            this.SymbolListAsync(Exchanges, null);
        }
        
        /// <remarks/>
        public void SymbolListAsync(string Exchanges, object userState) {
            if ((this.SymbolListOperationCompleted == null)) {
                this.SymbolListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSymbolListOperationCompleted);
            }
            this.InvokeAsync("SymbolList", new object[] {
                        Exchanges}, this.SymbolListOperationCompleted, userState);
        }
        
        private void OnSymbolListOperationCompleted(object arg) {
            if ((this.SymbolListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SymbolListCompleted(this, new SymbolListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://finance.easychart.net/Industry", RequestNamespace="http://finance.easychart.net", ResponseNamespace="http://finance.easychart.net", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Industry() {
            object[] results = this.Invoke("Industry", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIndustry(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Industry", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndIndustry(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IndustryAsync() {
            this.IndustryAsync(null);
        }
        
        /// <remarks/>
        public void IndustryAsync(object userState) {
            if ((this.IndustryOperationCompleted == null)) {
                this.IndustryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIndustryOperationCompleted);
            }
            this.InvokeAsync("Industry", new object[0], this.IndustryOperationCompleted, userState);
        }
        
        private void OnIndustryOperationCompleted(object arg) {
            if ((this.IndustryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IndustryCompleted(this, new IndustryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ExchangeCompletedEventHandler(object sender, ExchangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void EndOfDayCompletedEventHandler(object sender, EndOfDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EndOfDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EndOfDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void BinaryHistoryCompletedEventHandler(object sender, BinaryHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BinaryHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BinaryHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SymbolListCompletedEventHandler(object sender, SymbolListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SymbolListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SymbolListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void IndustryCompletedEventHandler(object sender, IndustryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IndustryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IndustryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591